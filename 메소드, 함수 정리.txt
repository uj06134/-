메서드, 함수 정리
1. fillna(): DataFrame에서 결측값을 원하는 값으로 변경하는 메서드
ex)
# 결측값을 중위수로 대체
med = df['f1'].median()
df['f1'] = df['f1'].fillna(med)

2. quantile(): 해당 행/열의 분위수의 해당하는 값을 반환하는 메서드
ex)
# IQR 구하기
Q1 = df['Fare'].quantile(0.25)
Q3 = df['Fare'].quantile(0.75)
IQR = Q3 - Q1

3. 올림, 내림, 반올림, 버림
np.ceil(): 주어진 숫자를 올림하여 정수로 반환하는 함수
np.floor(): 주어진 숫자를 내림하여 정수로 반환하는 함수
np.round(): 주어진 숫자를 반올림하여 정수 또는 소수점 이하 n자리까지 반올림하여 반환하는 함수
np.trunc(): 주어진 숫자를 소수점을 자르고 버리는 함수
ex)
# 주어진 데이터에서 이상치(소수점 나이)를 찾고 올림, 내림, 버림(절사), 반올림 했을때 4가지 모두 이상치 'age' 평균 구하기
decimal_df = df[df['age'] % 1 != 0]
m_ceil = np.ceil(decimal_df['age']).mean()
m_floor = np.floor(decimal_df['age']).mean()
m_trunc = np.trunc(decimal_df['age']).mean()
m_round = np.round(decimal_df['age']).mean()

4. map(): DF의 각 요소에 함수를 적용하여 값을 변환하거나 매핑할 때 사용
ex)
# f1결측치 city별 중앙값으로 대체
df['f1'] = df['f1'].fillna(df['city'].map({'서울':med_s,'경기':med_g,'부산':med_b,'대구':med_d}))

5. 왜도와 첨도
skew(): 왜도
kurt(): 첨도
ex)
# 'SalePrice'컬럼의 왜도와 첨도 구하기
sk = df['SalePrice'].skew()
ku = df['SalePrice'].kurt()

6. np.log1p(): 로그 변환
ex)
# 'SalePrice'컬럼 로그변환
df['SalePrice'] = np.log1p(df['SalePrice'])

7. np.abs(): 절대값 반환
ex)
# 'f4'컬럼 값이 'ENFJ'와 'INFP'인 'f1'의 표준편차 차이를 절대값으로 구하기
s1 = df.loc[df['f4']=='ENFJ', 'f1'].std()
s2 = df.loc[df['f4']=='INFP', 'f1'].std()
result = np.abs(s1 - s2)

8. dropna(subset=['col']): 컬럼에 결측치가 있는 행 제거
ex)
# 'f1'컬럼 결측 데이터를 제거
df = df.dropna(subset=['f1'])

9. groupby(['col']): 컬럼을 기준으로 데이터를 그룹화
★ 주의사항
groupby() 함수를 사용해서 그룹화를 한 후에는 그룹화된 결과를 어떻게 처리할지에 대한 작업을 추가로 해주어야 한다.
예를들면 groupby().sum, groupby().max(), groupby().mean()처럼 추가 작업이 필요
ex)
# 'city'와 'f2'를 기준으로 묶어 합계 구하기
df2 = df.groupby(['city', 'f2']).sum()

10. replace('a', 'b'): 'a'가 'b'로 대체
ex)
# 'f4'컬럼의 값이 'ESFJ'인 데이터를 'ISFJ'로 대체
df['f4'] = df['f4'].replace('ESFJ', 'ISFJ')

11. cumsum(): 누적합을 계산하는 함수
ex)
# 'f2' 컬럼이 1인 조건에 해당하는 데이터의 'f1'컬럼 누적합을 계산
df2 = df.loc[df['f2']==1,'f1'].cumsum()

12. 표준화 z = x-μ/σ
ex)
# 표준화 1
std = df['f5'].std()
mean = df['f5'].mean()
z = (df['f5'] - mean)/std

# 표준화 2 (sklearn)
from sklearn.preprocessing import StandardScaler
scaler = StandardScaler()
df['f5'] = scaler.fit_transform(df[['f5']])

★ 표준화1과 2의 값이 다른 이유
표준화 후의 중앙값은 원본 데이터의 중앙값과 다를 수 있다는 것입니다.
표준화는 데이터의 분포를 변경시키는 작업이기 때문에 중앙값 또한 변경될 수 있습니다. 즉, 표준화 전과 후의 중앙값이 다를 수 있습니다.

13. corr(): 각 열 간의 상관 계수를 반환하는 메서드
ex)
# quality와의 상관관계가 가장 큰 값 (quality와 quality 상관관계 제외)
max_corr = abs(df.corr()['quality'][:-1]).max()

14. reset_index(): 설정 인덱스를 제거하고 기본 인덱스(0,1,2, ... , n)으로 변경
ex)
#